// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum Provider {
  EMAIL
  KAKAO
  GOOGLE
  NAVER
}
enum GameType {
  BALANCE
  TOURNAMENT
}
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String?   // 소셜 로그인의 경우 비밀번호가 없을 수 있음
  nickname  String    @unique
  provider  Provider  @default(EMAIL) // 로그인 제공자 (이메일, 카카오 등)
  socialId  String?   // 소셜 로그인의 경우 제공되는 고유 ID
  createdAt DateTime  @default(now())
  comments  Comment[]

  @@index([email])
}

model FinalChoice {
  id            Int             @id @default(autoincrement())
  tournamentId Int
  selectedItemId Int
  createdAt     DateTime        @default(now())
  tournament   TournamentGame     @relation(fields: [tournamentId], references: [id])
  selectedItem  TournamentItem @relation(fields: [selectedItemId], references: [id])  // Item -> TournamentItem으로 수정

  @@index([tournamentId])
  @@index([selectedItemId])
}

model TournamentGame {
  id        Int               @id @default(autoincrement())
  title     String            @db.VarChar(20)
  username  String            @db.VarChar(8)
  items     TournamentItem[]
  participantCount Int       @default(0) 
  createdAt DateTime         @default(now())
  finalChoices  FinalChoice[]
  comments  Comment[]
}

model TournamentItem {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(20)
  imageUrl      String      @db.VarChar(1000)
  tournament   TournamentGame @relation(fields: [tournamentId], references: [id])
  tournamentId Int
    finalChoices  FinalChoice[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text  
  createdAt DateTime @default(now())
  
  // 어떤 게임의 댓글인지
  gameId    Int
  game      TournamentGame @relation(fields: [gameId], references: [id])
  
  // 어떤 사용자가 작성했는지
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([gameId]) // 게임별 댓글 조회 성능 향상
  @@index([userId]) // 사용자별 댓글 조회 성능 향상
}